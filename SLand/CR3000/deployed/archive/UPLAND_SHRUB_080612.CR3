'CR3000 Series Datalogger

'Copyright (c) 2002, 2006 Campbell Scientific, Inc. All rights reserved.

'25 October 07
'version 2.2.1


' This datalogger program measures turbulence sensors at 10 or 20 Hz. The time series
'can be saved to a card. The datalogger will also compute online turbulent fluxes
'from the measured data. The flux table saves all the cross products that are
'required to rotate the online fluxes into natural wind coordinates in post
'processing as described in Kaimal and Finnigan (1994), and Tanner and Thurtell (1969).


'The following sensors are measured:
'
'CSAT3		three dimensional sonic anemometer
'LI-7500		open path infrared gas analyzer (CO2 and H2O)
'HMP45C		temperature and relative humidity probe
'CNR1		net radiometer
'HFT3		soil heat flux plates (two sensors)
'TCAV		type E thermocouple averaging soil temperature probes (one sensor)
'CS616		water content reflectometer (volumetric soil moisture)(twentytwo sensors)
'CS105		atmospheric pressure
'IRTS		infrared temperature sensor
'TE-525		rain gauge


' The sign convention for the fluxes, except net radiation, is positive away from the
'surface and negative towards the surface.
'
' The datalogger will introduce lags into the CSAT3, LI-7500, and datalogger Panel
'Temperature data so that all measurements are aligned in time. The lags are a
'function of the Scan Interval and are computed automatically by the program.
'
' The site attendant must load in several constants and calibration values. Search
'for the text string "unique" to find the locations where unique constants and
'calibration values are entered.


'*** Unit Definitions ***

'Units	Units
'C		Celsius
'degrees	degrees (angle)
'g		grams
'J		Joules
'kg		kilograms
'kPa		kilopascals
'm		meters
'mg		milligrams
'mmol	millimoles
'mol		moles
'uSeconds	microseconds
's		seconds
'umol	micromols
'V		volts
'W		Watts


'*** Wiring ***

'SDM INPUT
'SDM-C1	CSAT3 SDM Data (green)
'		LI-7500 SDM Data (gray)
'SDM-C2	CSAT3 SDM Clock (white)
'		LI-7500 SDM Clock (blue)
'SDM-C3	CSAT3 SDM Enable (brown)
'		LI-7500 SDM Enable (brown)
'G		CSAT3 SDM reference (black)
'		CSAT3 SDM shield (clear)
'		LI-7500 SDM reference (black)
'		LI-7500 SDM shield (white)


'ANALOG INPUT
'1H		CNR1 downwelling shortwave radiation signal (red)
'1L		CNR1 downwelling shortwave radiation signal reference (blue)
'gnd		CNR1 shield (clear)

'2H		CNR1 upwelling shortwave radiation signal (white)
'2L		CNR1 upwelling shortwave radiation signal reference (black)

'3H		CNR1 downwelling longwave radiation signal (gray)
'3L		CNR1 downwelling longwave radiation signal reference (yellow)

'4H		CNR1 upwelling longwave radiation signal (brown)
'4L		CNR1 upwelling longwave radiation signal reference (green)

'5H		CNR1 Pt100 (yellow)
'5L		CNR1 Pt100 (green)

'6H		CS105 pressure signal (yellow)
'6L		CS105 pressure reference (white)
'gnd		CS105 pressure shield (clear)

'7H		HMP45C temperature signal (yellow)
'7L		HMP45C signal reference (white)
'gnd		HMP45C shield (clear)

'8H		HMP45C relative humidity signal (blue)
'8L		short jumper wire to 7L

'9H		HFT3 #1 signal (black)
'9L		HFT3 #1 signal reference (white)
'gnd		HFT3 #1 shield (clear)

'10H		HFT3 #2 signal (black)
'10L		HFT3 #2 signal reference (white)
'gnd		HFT3 #2 shield (clear)

'11H		TCAV signal (purple)
'11L		TCAV signal reference (red)
'gnd		TCAV shield (clear)

'12H		PAR signal (red)
'12L		PAR signal reference (black)
'gnd		PAR shield (clear)



'13H		AM16/32A COM ODD H (?)
'13L		AM16/32A COM EVEN L (?)
'gnd		AM16/32A COM ODD H (?)
'		AM16/32A COM EVEN L (?)
'		AM16/32A gnd (?)
'		AM16/32A signal cable shield (clear)

'14H		IRTS body signal (yellow)
'14L		IRTS body signal reference (red)
'gnd		IRTS body shield (clear)




'PULSE PORT (Changed from P2 to P1 112211 by S. Hackley)
'P1			TE525 rain gauge (black)
'G			TE525 rain gauge (white)
'			TE525 shield (clear)


'CONTROL PORT
'C4		AM16/32A reset (?)
'C5		AM16/32A clock (?)
'C6		CS616 power control (orange)
'G		CS616 shield (clear)
'		AM16/32A control refernece (?)


'POWER OUT
'12V		HMP45C power (red)
'		CS616 power (red)
'		AM16/32A
'G		HMP45C power reference (black)
'		CS616 signal reference (black)
'		AM16/32A


'POWER IN
'12V		datalogger (red)
'G		datalogger (black)


'EXTERNAL POWER SUPPLY
'POS		CSAT3 power (red)
'		LI-7500 power (red with white)
'		datalogger (red)
'NEG		CSAT3 power reference (black)
'		CSAT3 power shield (clear)
'		LI-7500 power reference (red with black)
'		LI-7500 ground (green)
'		datalogger (black)

PipeLineMode

'*** Constants ***

'Measurement Rate				'10 Hz		20 Hz
Const SCAN_INTERVAL = 100		'100 mSec		50 mSec

'Output period
Const OUTPUT_INTERVAL = 30		'Online flux data output interval in minutes.
Const NUM_DAY_CPU = 7			'Number of days of data to store on the CPU.

'Const HFT_CAL_1 = 33			'Unique multiplier for HFT3 #1.
'Const HFT_CAL_2 = 37.6			'Unique multiplier for HFT3 #2.
Const HFP01_CAL_1= 15.34    'unique multiplier for HFP01SC #1 (1000/sensitivity)
Const HFP01_CAL_2= 15.72    'unique multiplier for HFP01SC #2 (1000/sensitivity)
Const HFP01_CAL_3= 15.87    'unique multiplier for HFP01SC #3 (1000/sensitivity)
Const HFP01_CAL_4= 15.93    'unique multiplier for HFP01SC #4 (1000/sensitivity)
Const HFP01_CAL_5= 15.72    'unique multiplier for HFP01SC #5 (1000/sensitivity)
Const HFP01_CAL_6= 16.20    'unique multiplier for HFP01SC #6 (1000/sensitivity)



Const CSAT3_AZIMUTH = 180		'Unique value.
'Compass azimuth of the -x axis. For the figure
' below, CSAT3_AZIMUTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system
'
'
'                               (N)
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'                                |
'              (W) {+x} <-------[ ]----X--- {-x} (E)
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S)
'
'The program computes the compass wind direction, using the constant
' CSAT3_AZIMUTH, and a CSAT3 wind direction. Good CSAT3 wind directions
' are between -90 to 0 and 0 to 90 degrees, e.g. the wind is blowing into
' the CSAT3 sensor head.


Const OFFSET = 16						'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const DELAY_CSAT = 2					'Fixed inherent lag of the CSAT3 data (two scans).
Const DELAY_IRGA = INT (300/SCAN_INTERVAL)	'Fixed inherent lag of the LI-7500 data (three scans at 10 Hz or six scans at 20 Hz).

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and LI-7500.
Const SCAN_BUFFER_SIZE = 60*INT (1000/SCAN_INTERVAL)	'Compute a 60 second scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align LI-7500 data.

'Compute CPU and card storage size for the FLUX DataTables.
Const FLUX_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL'Size of flux DataTable on CPU [days].

Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440				'Estimate of the latent heat of vaporization [J/g].
Const SDM_PER = 30				'Default SDM clock speed.
Const MU_WPL = 29/18			'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3				'Universal gas constant [kPa m^3/(K mol) ].
Const RD = R/29				'Gas constant for dry air [kPa m^3/(K g)].
Const RV = R/18				'Gas constant for water vapor [kPa m^3/(K g)].


'*** AM16/32A Constants and Variables ***
Const MUX_NUM_SENSORS = 22		'Number of sensors connected to AM16/32A (must be even).
Const MUX_SCANS_PER_CHANNEL = 2	'If set to less than 2, data is entered in the wrong elements because of the one scan delay between processing and measurement.
Public Dim mux_signal(2)			'Raw measurement from the AM16/32A.
Public Dim mux_start As Boolean	'Manually start AM16/32A measurements.
Public Dim mux_on As Boolean		'Turn on the AM16/32A.
Public Dim mux_clock As Boolean	'Clock the AM16/32A.
Public Dim mux_index			'AM16/32A index variable.
Public Dim mux_count			'Counter variable.
Public Dim mux_scans			'Number of scans on a AM16/32A channel.


'*** Variables ***

'Online lagged CSAT3 and LI-7500 data.
Public aligned_data(10)
Alias aligned_data(1) = panel_temp
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = Uz
Alias aligned_data(5) = Ts
Alias aligned_data(6) = diag_csat
Alias aligned_data(7) = co2
Alias aligned_data(8) = h2o
Alias aligned_data(9) = press
Alias aligned_data(10) = diag_irga
Units panel_temp = C
Units Ux = m/s
Units Uy = m/s
Units Uz = m/s
Units Ts = C
Units diag_csat = unitless
Units co2 = mg/m^3
Units h2o = g/m^3
Units press = kPa
Units diag_irga = unitless

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol


Public diag_bits(8) AS Boolean	'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Alias diag_bits(5) = chopper_f	'Chopper warning flag.
Alias diag_bits(6) = detector_f	'Detector warning flag.
Alias diag_bits(7) = pll_f		'PLL warning flag.
Alias diag_bits(8) = sync_f		'Synchronization warning flag.
Units diag_bits = samples
Public agc AS Long				'Automatic gain control.
Units agc = unitless


'No delay meteorological variables.
Public hmp(2)				'HMP45C temperature and relative humidity.
Public e_hmp				'HMP45C vapor pressure.
Dim h2o_hmp_mean			'Mean HMP45C vapor density.
Dim rho_a_mean				'Mean air density.
Public batt_volt			'Datalogger battery voltage.
Public low12V
Public watchdog
Alias hmp(1) = t_hmp
Alias hmp(2) = rh_hmp
Units t_hmp = C
Units rh_hmp = percent
Units e_hmp = kPa
Units h2o_hmp_mean = g/m^3
Units rho_a_mean = kg/m^3
Units batt_volt = V

Public mux25t_signal(23)
Alias mux25t_signal(1)= dummysoilT1
Alias mux25t_signal(2)= dummysoilT2
Alias mux25t_signal(3)=soilt_O1_22.5
Alias mux25t_signal(4)=soilt_O1_37.5
Alias mux25t_signal(5)=soilt_O1_52.5
Alias mux25t_signal(6)=soilt_S1_2.5
Alias mux25t_signal(7)=soilt_S1_12.5
Alias mux25t_signal(8)=soilt_S1_22.5
Alias mux25t_signal(9)=soilt_S1_37.5
Alias mux25t_signal(10)=soilt_S1_52.5
Alias mux25t_signal(11)=soilt_O2_2.5
Alias mux25t_signal(12)=soilt_O2_12.5
Alias mux25t_signal(13)=soilt_O2_22.5
Alias mux25t_signal(14)=soilt_O2_37.5
Alias mux25t_signal(15)=soilt_O2_52.5
Alias mux25t_signal(16)=soilt_S2_2.5
Alias mux25t_signal(17)=soilt_S2_12.5
Alias mux25t_signal(18)=soilt_S2_22.5
Alias mux25t_signal(19)=soilt_S2_37.5
Alias mux25t_signal(20)=soilt_S2_52.5
Alias mux25t_signal(21)=soilt_O1_2.5
Alias mux25t_signal(22)=soilt_O1_12.5
Alias mux25t_signal(23)=Tsoil
Units Tsoil = C

'Soil temperature mean.
Dim Tsoil_avg
Units Tsoil_avg = C
Public mux_ref_temp
Units mux25t_signal = mV
Units mux_ref_temp = C

Public par(2)
Alias par(1)=par_incoming
Alias par(2)= par_upwelling


'No delay energy balance sensor.
Public BP_mbar
Public cnr1(14)
Alias cnr1(1) = CM3Up
Alias cnr1(2) = CM3Dn
Alias cnr1(3) = CG3Up
Alias cnr1(4) = CG3Dn
Alias cnr1(5) = CNR1TC
Alias cnr1(6) = CNR1TK
Alias cnr1(7) = NetRs
Alias cnr1(8) = NetRl
Alias cnr1(9) = Albedo
Alias cnr1(10) = UpTot
Alias cnr1(11) = DnTot
Alias cnr1(12) = NetTot
Alias cnr1(13) = CG3UpCo
Alias cnr1(14) = CG3DnCo



Units BP_mbar = mbar
Units CM3Up = W/m^2
Units CM3Dn = W/m^2
Units CG3Up = W/m^2
Units CG3Dn = W/m^2
Units CNR1TC = C
Units CNR1TK = K
Units NetRs = W/m^2
Units NetRl = W/m^2
Units Albedo = W/m^2
Units UpTot = W/m^2
Units DnTot = W/m^2
Units NetTot = W/m^2
Units CG3UpCo = W/m^2
Units CG3DnCo = W/m^2

Public irts(3)
Alias irts(1) = irts_target_cor
Alias irts(2) = irts_body
Alias irts(3) = irts_target
Public rain
Units irts = C
Units rain = mm

Public hft3(2)

Public Dim shf_mV(6)
'Alias shf_mV(1)= mV_dummy
Alias shf_mV(1)= mV_hfp01_1
Alias shf_mV(2) = mV_hfp01_2
Alias shf_mV(3) = mV_hfp01_3
Alias shf_mV(4) = mV_hfp01_4
Alias shf_mV(5) = mV_hfp01_5
Alias shf_mV(6) = mV_hfp01_6


Public shf(6)
'Alias shf(1) = hfp01_dummy
Alias shf(1)= shf_sh_1
Alias shf(2) = shf_sh_2
Alias shf(3) = shf_gr_1
Alias shf(4) = shf_gr_2
Alias shf(5) = shf_op_1
Alias shf(6) = shf_op_2

Public soil_co2(12)
Alias soil_co2(1) = soil_co2_shrub1_5cm
Alias soil_co2(2) = soil_co2_shrub1_10cm
Alias soil_co2(3) = soil_co2_shrub1_20cm
Alias soil_co2(4) = soil_co2_shrub1_50cm
Alias soil_co2(5) = soil_co2_shrub2_5cm
Alias soil_co2(6) = soil_co2_shrub2_10cm
Alias soil_co2(7) = soil_co2_shrub2_20cm
Alias soil_co2(8) = soil_co2_shrub2_50cm
Alias soil_co2(9) = soil_co2_shrub3_5cm
Alias soil_co2(10) = soil_co2_shrub3_10cm
Alias soil_co2(11) = soil_co2_shrub3_20cm
Alias soil_co2(12) = soil_co2_shrub3_50cm




Public RTD_temp(3)
Alias RTD_temp(1)=RTD_50cm
Alias RTD_temp(2)=RTD_150cm
Alias RTD_temp(3)=RTD_250cm



Dim shf_cal(6)				'Soil heat flux plate calibration coefficients.
Units shf = W/m^2

Public NDVI(8)
'Alias NDVI(1)= up_dummy
Alias NDVI(1)=up_532  'blue, blue/stripe	
Alias NDVI(2)=up_568  'green, green/stripe
Alias NDVI(3)=up_676  'white, white/stripe
Alias NDVI(4)=up_798   'red, red/stripe
Alias NDVI(5)=down_532
Alias NDVI(6)=down_568
Alias NDVI(7)=down_676
Alias NDVI(8)=down_798



Public del_Tsoil
Public cs616_wcr(22)	'Water content reflectometer period.
Alias cs616_wcr(1) = soil_h2o_o1_2.5
Alias cs616_wcr(2) = soil_h2o_o1_12.5
Alias cs616_wcr(3) = soil_h2o_o1_22.5
Alias cs616_wcr(4) = soil_h2o_o1_37.5
Alias cs616_wcr(5) = soil_h2o_o1_52.5
Alias cs616_wcr(6) = soil_h2o_s1_2.5
Alias cs616_wcr(7) = soil_h2o_s1_12.5
Alias cs616_wcr(8) = soil_h2o_s1_22.5
Alias cs616_wcr(9) = soil_h2o_s1_37.5
Alias cs616_wcr(10) = soil_h2o_s1_52.5
Alias cs616_wcr(11) = soil_h2o_o2_2.5
Alias cs616_wcr(12) = soil_h2o_o2_12.5
Alias cs616_wcr(13) = soil_h2o_o2_22.5
Alias cs616_wcr(14) = soil_h2o_o2_37.5
Alias cs616_wcr(15) = soil_h2o_o2_52.5
Alias cs616_wcr(16) = soil_h2o_s2_2.5
Alias cs616_wcr(17) = soil_h2o_s2_12.5
Alias cs616_wcr(18) = soil_h2o_s2_22.5
Alias cs616_wcr(19) = soil_h2o_s2_37.5
Alias cs616_wcr(20) = soil_h2o_s2_52.5
Alias cs616_wcr(21) = dummy1
Alias cs616_wcr(22) = dummy2



Public soil_water_T(MUX_NUM_SENSORS)'Volumetric soil water content with temperature correction.

Dim prev_Tsoil
Dim cs616_T(MUX_NUM_SENSORS)			'Water content refectometer period with temperature correction.


Units del_Tsoil = C
Units cs616_wcr = uSeconds
Units soil_water_T = frac_v_wtr


'Flux variables.
Dim Fc_wpl				'Carbon dioxide flux (LI-7500), with Webb et al. term.
Dim LE_wpl				'Latent heat flux (LI-7500), with Webb et al. term.
Dim Hs					'Sensible heat flux using sonic temperature.
Dim Hc					'Sensible heat flux computed from Hs and LE_wpl.
Dim tau					'Momentum flux.
Dim u_star				'Friction velocity.
Dim Fc_irga				'Carbon dioxide flux (LI-7500), without Webb et al. term.
Dim LE_irga				'Latent heat flux (LI-7500), without Webb et al. term.
Dim co2_wpl_LE				'Carbon dioxide flux (LI-7500), Webb et al. term due to latent heat flux.
Dim co2_wpl_H				'Carbon dioxide flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim h2o_wpl_LE				'Latent heat flux (LI-7500), Webb et al. term due to latent heat flux.
Dim h2o_wpl_H				'Latent heat flux (LI-7500), Webb et al. term due to sensible heat flux.
Dim cov_out(32)			'Covariances of scalars and wind, wind vector, t_hmp_mean, e_mean, co2_mean, press_mean, Ts_mean, and mean soil temperature.
Units Fc_wpl = mg/(m^2 s)
Units LE_wpl = W/m^2
Units Hs = W/m^2
Units Hc = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2


'Aliases for covariances.
Alias cov_out(1) = stdev_Ts
Alias cov_out(2) = cov_Ts_Ux
Alias cov_out(3) = cov_Ts_Uy
Alias cov_out(4) = cov_Ts_Uz
Alias cov_out(5) = stdev_Ux
Alias cov_out(6) = cov_Ux_Uy
Alias cov_out(7) = cov_Ux_Uz
Alias cov_out(8) = stdev_Uy
Alias cov_out(9) = cov_Uy_Uz
Alias cov_out(10) = stdev_Uz
Alias cov_out(11) = stdev_co2
Alias cov_out(12) = cov_co2_Ux
Alias cov_out(13) = cov_co2_Uy
Alias cov_out(14) = cov_co2_Uz
Alias cov_out(15) = stdev_h2o
Alias cov_out(16) = cov_h2o_Ux
Alias cov_out(17) = cov_h2o_Uy
Alias cov_out(18) = cov_h2o_Uz
Units stdev_Ts = C
Units cov_Ts_Ux = m C/s
Units cov_Ts_Uy = m C/s
Units cov_Ts_Uz = m C/s
Units stdev_Ux = m/s
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_Uz = (m/s)^2
Units stdev_Uy = m/s
Units cov_Uy_Uz = (m/s)^2
Units stdev_Uz = m/s
Units stdev_co2 = mg/m^3
Units cov_co2_Ux = mg/(m^2 s)
Units cov_co2_Uy = mg/(m^2 s)
Units cov_co2_Uz = mg/(m^2 s)
Units stdev_h2o = g/m^3
Units cov_h2o_Ux = g/(m^2 s)
Units cov_h2o_Uy = g/(m^2 s)
Units cov_h2o_Uz = g/(m^2 s)

'Wind directions and speed.
'Alias cov_out(19) = wnd_spd - in compass coordinate system, same as CSAT3.
'Alias cov_out(20) = rslt_wnd_spd - in compass coordinate system, same as CSAT3.
Alias cov_out(21) = wnd_dir_compass
'Alias cov_out(22) = std_wnd_dir - in compass coordinate system, same as CSAT3.
Alias cov_out(23) = wnd_spd
Alias cov_out(24) = rslt_wnd_spd
Alias cov_out(25) = wnd_dir_csat3
Alias cov_out(26) = std_wnd_dir
Alias cov_out(27) = t_hmp_mean
Alias cov_out(28) = e_hmp_mean
Alias cov_out(29) = co2_mean
Alias cov_out(30) = press_mean
Alias cov_out(31) = Ts_mean
Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units t_hmp_mean = C
Units co2_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C

'Soil temperature mean.
'Dim Tsoil_avg
'Units Tsoil_avg = C


'Diagnostic variables.
Dim disable_flag_on(4) AS Boolean	'Intermediate processing disable flags.
'disable_flag_on(1)				'TRUE when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'disable_flag_on(2)				'TRUE when LI-7500 diagnostic warning flags are on or LI-7500 failed to send data.
'disable_flag_on(3)				'TRUE when CSAT3 diagnostic warning flags are on.
'                  				  Used to filter the sum of CSAT3 diagnostic warning flags.
'disable_flag_on(4)				'TRUE when LI-7500 diagnostic warning flags are on.
'                  				  Used to filter the sum of LI-7500 diagnostic warning flags.
Dim cov_disable_flag AS Boolean	'TRUE when CSAT3 or LI-7500 reports bad data.
Dim n						'Number of samples in the online covariances.
Units n = samples


'No delay CSAT3 data.
Dim wind_raw(5)
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = unitless

'No delay LI-7500 data.
Dim irga_raw(4)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Alias irga_raw(3) = press_raw
Alias irga_raw(4) = diag_irga_raw
Units co2_raw = umol/m^3
Units h2o_raw = mmol/m^3
Units press_raw = kPa
Units diag_irga_raw = unitless

'No delay analog measurements.
Dim panel_temp_raw
Units panel_temp_raw = C

'Working variables.
Dim cov_array(3,4)				'Arrays used to hold the input data for the covariance instructions.
Dim co2_mm_m3					'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol concentration.
Dim h2o_mm_m3					'Water vapor concentration [mmol/m^3], used to compute vapor pressure and mmol/mol concentration.
Dim sigma_wpl					'Webb et al. sigma = density of water vapor / density of dry air.
Dim j						'Generic counter variable.
Dim scan_count As Long			'Number scans executed.
Dim wind_east					'East wind in compass coordinate system.
Dim wind_north					'North wind in compass coordinate system.
Dim save_ts_flag_on As Boolean	'Used to synchronize the time series output to the even minute.
Dim dly_data_out(10)			'Variable used to temporarily store the lagged record.
Dim rho_d_mean					'Density of dry air used in Webb et al. term [kg / m^3].
Dim diag_csat_work As Long		'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work As Long		'Working variable used to break out the LI-7500 diagnostic bits.
Dim e_sat						'Saturation vapor pressure.
Dim Psb,Hsb,Ksb,SenEC			'IRTS working variables.
Dim j_mux As Long
Dim dsble_flg_on_mux As Boolean
Dim am25t_dsble_flg_on_mux As Boolean


'*** Final Output Data Tables ***

'Online flux data.
DataTable (flux,TRUE,FLUX_SIZE_CPU)
	DataInterval (0,OUTPUT_INTERVAL,Min,10)
	CardOut (0,-1)

	Sample (1,Fc_wpl,IEEE4)
	Sample (1,LE_wpl,IEEE4)
	Sample (1,Fc_irga,IEEE4)
	Sample (1,LE_irga,IEEE4)
	Sample (1,co2_wpl_LE,IEEE4)
	Sample (1,co2_wpl_H,IEEE4)
	Sample (1,h2o_wpl_LE,IEEE4)
	Sample (1,h2o_wpl_H,IEEE4)

	Sample (1,Hs,IEEE4)
	Sample (1,Hc,IEEE4)
	Sample (1,tau,IEEE4)
	Sample (1,u_star,IEEE4)

	Sample (1,Ts_mean,IEEE4)
	Sample (4,stdev_Ts,IEEE4)

	Sample (1,co2_mean,IEEE4)
	Sample (4,stdev_co2,IEEE4)
	Average (1,h2o,IEEE4,disable_flag_on(2))
	Sample (4,stdev_h2o,IEEE4)

	Average (1,Ux,IEEE4,disable_flag_on(1))
	Sample (3,stdev_Ux,IEEE4)
	Average (1,Uy,IEEE4,disable_flag_on(1))
	Sample (2,stdev_Uy,IEEE4)
	Average (1,Uz,IEEE4,disable_flag_on(1))
	Sample (1,stdev_Uz,IEEE4)

	Average (1,co2_um_m,IEEE4,(disable_flag_on(2) )
	Average (1,h2o_mm_m,IEEE4,(disable_flag_on(2) )
	Sample (1,rho_a_mean,IEEE4)
	Sample (1,press_mean,IEEE4)

	Sample (1,wnd_dir_compass,IEEE4)
	Sample (1,wnd_dir_csat3,IEEE4)
	Sample (1,wnd_spd,IEEE4)
	Sample (1,rslt_wnd_spd,IEEE4)
	Sample (1,std_wnd_dir,IEEE4)

	Average (1,panel_temp,IEEE4,FALSE)
	Average (1,batt_volt,IEEE4,FALSE)

	Totalize (1,n,IEEE4,cov_disable_flag)

	Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)))
	FieldNames ("csat_warnings")

	Totalize (1,n,IEEE4,NOT (disable_flag_on(2) OR disable_flag_on(4)))
	FieldNames ("irga_warnings")

	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT (disable_flag_on(3)))
	FieldNames ("del_T_f_Tot")
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag_on(3)))
	FieldNames ("sig_lck_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_h_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_l_f_Tot")
	Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag_on(4)))
	FieldNames ("chopper_f_Tot")
	Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag_on(4)))
	FieldNames ("detector_f_Tot")
	Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag_on(4)))
	FieldNames ("pll_f_Tot")
	Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag_on(4)))
	FieldNames ("sync_f_Tot")
	Average (1,agc,IEEE4,disable_flag_on(2))
	Sample   (1,low12V,IEEE4)
	Totalize (1,watchdog,IEEE4,FALSE)

	Average (1,CM3Up,IEEE4,FALSE)
	FieldNames ("Rad_short_Up_Avg")
	Average (1,CM3Dn,IEEE4,FALSE)
	FieldNames ("Rad_short_Dn_Avg")
	Average (1,CG3Up,IEEE4,FALSE)
	FieldNames ("Rad_long_Up_Avg")
	Average (1,CG3Dn,IEEE4,FALSE)
	FieldNames ("Rad_long_Dn_Avg")
	Average (1,NetTot,IEEE4,FALSE)
	Average (1,NetRs,IEEE4,FALSE)
	Average (1,NetRl,IEEE4,FALSE)
	Average (1,CNR1TC,IEEE4,FALSE)
	'par upwelling measured on am25t now
	Average (1,par(2),IEEE4,am25t_dsble_flg_on_mux)
	Average (3,irts_target_cor,IEEE4,FALSE)

	Sample (1,t_hmp_mean,IEEE4)
	Sample (1,rh_hmp,IEEE4)
	Sample (1,h2o_hmp_mean,IEEE4)

	Totalize (1,rain,IEEE4,FALSE)

	Average (2,hft3(1),IEEE4,FALSE)
	Sample (1,del_Tsoil,IEEE4)
 'Tsoil - TCAV = T soil and is mux25T_signal(23)
	Average (1,mux25t_signal(23),IEEE4,dsble_flg_on_mux)
	Average (MUX_NUM_SENSORS,cs616_wcr(1),IEEE4,dsble_flg_on_mux)
	Average (MUX_NUM_SENSORS,soil_water_T(1),IEEE4,dsble_flg_on_mux)
	Average (8,NDVI(1),IEEE4,dsble_flg_on_mux)
	Totalize (1,n,IEEE4,dsble_flg_on_mux)
	FieldNames ("n_mux")
	Average(6,shf(1),IEEE4,FALSE)
	'par_incoming is measured on mux 25T now 
	Average(1,par(1),IEEE4,am25t_dsble_flg_on_mux)
	Average (2,mux25t_signal(21),IEEE4,am25t_dsble_flg_on_mux)
	Average (18,mux25t_signal(3),IEEE4,am25t_dsble_flg_on_mux)
	Average (3,RTD_temp(1),IEEE4,FALSE)
	Average (12,soil_co2(1),IEEE4,FALSE)
EndTable


'Time series data.
DataTable (ts_data,save_ts_flag_on,-1)
	DataInterval (0,SCAN_INTERVAL,mSec,100)
	CardOut (0,-1)

	Sample (1,Ux,IEEE4)
	Sample (1,Uy,IEEE4)
	Sample (1,Uz,IEEE4)
	Sample (1,co2,IEEE4)
	Sample (1,h2o,IEEE4)
	Sample (1,Ts,IEEE4)
	Sample (1,press,IEEE4)
	Sample (1,diag_csat,IEEE4)
	Sample (1,agc,IEEE4)
'	Sample (1,t_hmp,IEEE4)
'	Sample (1,e_hmp,IEEE4)
EndTable


'*** Working Data Tables ***

'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)
	Sample (1,panel_temp_raw,IEEE4)
	Sample (1,Ux_raw,IEEE4)
	Sample (1,Uy_raw,IEEE4)
	Sample (1,Uz_raw,IEEE4)
	Sample (1,Ts_raw,IEEE4)
	Sample (1,diag_csat_raw,IEEE4)
	Sample (1,co2_raw,IEEE4)
	Sample (1,h2o_raw,IEEE4)
	Sample (1,press_raw,IEEE4)
	Sample (1,diag_irga_raw,IEEE4)
EndTable


'Compute the flux covariances and the other cross products required to rotate the data
'into natural wind coordinates. This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	'Compute covariances from CSAT3 data.
	Covariance (4,cov_array(1,1),IEEE4,disable_flag_on(1),10)
	'Compute covariance of CO2 against CSAT3 wind data.
	Covariance (4,cov_array(2,1),IEEE4,cov_disable_flag,4)
	'Compute covariance of H2O against CSAT3 wind data.
	Covariance (4,cov_array(3,1),IEEE4,cov_disable_flag,4)
	WindVector (1,wind_east,wind_north,IEEE4,disable_flag_on(1),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,disable_flag_on(1),0,1,2)
	Average (1,t_hmp,IEEE4,FALSE)
	Average (1,e_hmp,IEEE4,FALSE)
	Average (1,co2,IEEE4,disable_flag_on(2))
	Average (1,press,IEEE4,disable_flag_on(2))
	Average (1,Ts,IEEE4,disable_flag_on(1))
	Average (1,Tsoil,IEEE4,FALSE)
EndTable



'*** Program ***

BeginProg
	n = 1

	'Set all CSAT3 variables to NaN.
	Move (Ux_raw,5,NaN,1)

	'Set all LI-7500 variables to NaN.
	Move (co2_raw,4,NaN,1)

	'Set the CS616 variable to NaN.
	Move (cs616_wcr(1),MUX_NUM_SENSORS,NaN,1)

	'Set the previous soil temerature to NaN.
	Move (prev_Tsoil,1,NaN,1)

	'Set the SDM clock speed.
	SDMSpeed (SDM_PER)

	'Load the HFT3 factory calibration.
	shf_cal(1) = HFP01_CAL_1
	shf_cal(2) = HFP01_CAL_2
	shf_cal(3) = HFP01_CAL_3
	shf_cal(4) = HFP01_CAL_4
	shf_cal(5) = HFP01_CAL_5
	shf_cal(6) = HFP01_CAL_6

	Scan (SCAN_INTERVAL,mSec,SCAN_BUFFER_SIZE,0)
		'Datalogger panel temperature.
		PanelTemp (panel_temp_raw,250)


		'Get CSAT3 wind and sonic temperature data.
		CSAT3 (Ux_raw,1,3,91,CSAT_OPT)


		'Get LI-7500 data.
		CS7500 (co2_raw,1,7,6)


'		'Measure barometric pressure
'	  VoltDiff (BP_mbar,1,mV5000,6,TRUE,200,250,.184,600)


		'CNR1 Net Radiometer measurements CM3Up, CM3Dn, CG3Up, CG3Dn, CNR1TC, CNR1TK,
		VoltDiff (CM3Up,4,mV20,1,TRUE,200,250,136.99,0)
		Resistance (CNR1TC,1,mV200,5,Ix1,1,1675,TRUE,TRUE,200,250,1,0)
		CNR1TC = CNR1TC/100
		PRT (CNR1TC,1,CNR1TC,1,0)
		CNR1TK = CNR1TC+273.18
		
		NetRs = CM3Up-CM3Dn
		NetRl = CG3Up-CG3Dn
		Albedo = CM3Dn/CM3Up
		UpTot = CM3Up+CG3Up
		DnTot = CM3Dn+CG3Dn
		NetTot = UpTot-DnTot
		CG3UpCo = CG3Up+5.67e-8*CNR1TK*CNR1TK*CNR1TK*CNR1TK
		CG3DnCo = CG3Dn+5.67e-8*CNR1TK*CNR1TK*CNR1TK*CNR1TK


	
    
		'Measure the HMP45C temperature and fraction humidity.
		VoltDiff (t_hmp,2,mV1000,7,TRUE,200,250,0.1,0)


		'Measure battery voltage.
		Battery (batt_volt)
		low12V = Status.Low12VCount(1,1)
		watchdog = Status.WatchdogErrors(1,1)


		'Find the engineering units for the HMP45C temperature and humidity.
		t_hmp = t_hmp-40

		'Find the HMP45C vapor pressure (kPa).
		VaporPressure (e_hmp,t_hmp,rh_hmp)


		Resistance (RTD_temp(1),2,mV200,10,Ix2,1,180,True ,True ,200,250,0.001,0)
    PRT (RTD_temp(1),2,RTD_temp(1),1.0,0)
 
    Resistance (RTD_temp(3),1,mV200,12,Ix3,1,180,True ,True ,200,250,0.001,0)
    PRT (RTD_temp(3),1,RTD_temp(3),1.0,0)


		'Measure the TCAV soil thermocouples.
		TCDiff (Tsoil,1,mV20C,11,TypeE,panel_temp_raw,TRUE,200,250,1,0)


		'Measure the IRST infrared temperature sensor.
		TCDiff (irts_body,1,mV20C,14,TypeK,panel_temp_raw,TRUE,200,250,1,0)
		Psb = 49.9092+(0.59237*irts_body)-(0.00558*irts_body*irts_body)
		Hsb = 4.2828+(0.4248*irts_body)-(0.00077*irts_body*irts_body)
		Ksb = 52.0705-(5.3816*irts_body)+(0.387*irts_body*irts_body)
		SenEC = 0.25/Psb*(((irts_target-Hsb)*(irts_target-Hsb))-Ksb)
		irts_target_cor = irts_target-SenEc


		'Start automatic AM16/32A measurements.
		If ( IfTime(25,30,Min) ) Then ( mux_start = TRUE )

		'Turn on the AM16/32A, under automatic or manual control, and initalize variables.
		If ( mux_start ) Then
			mux_start = FALSE
			mux_on = TRUE
			mux_clock = TRUE
			mux_index = 1
			mux_count = 0
		EndIf
		PortSet (4,mux_on)

		'Clock the AM16/32A.
		PortSet (5,mux_clock)
		Delay (0,20,mSec)
		PortSet (5,FALSE)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		CS616 (mux_signal(1),2,25,6,2,1,0)

		If ( mux_on ) Then
			'Counter used to stay on a given AM16/32A channel for MUX_SCANS_PER_CHANNEL scans.
			mux_count = mux_count+1
			mux_scans = (mux_count MOD MUX_SCANS_PER_CHANNEL)
			If ( mux_scans = 0 ) Then
				cs616_wcr(mux_index) = mux_signal(1)
				cs616_wcr(mux_index+1) = mux_signal(2)				
				If ( mux_index < MUX_NUM_SENSORS ) Then ( mux_clock = TRUE )
				mux_index = mux_index+2
			Else
				mux_clock = FALSE
			EndIf
		EndIf

		'End AM16/32A measurments.
		If ( mux_index > MUX_NUM_SENSORS) Then
			mux_on = FALSE
			mux_clock = FALSE

			'Scale the CS616 data and apply the temperature correction.
			For j = 1 To MUX_NUM_SENSORS
				'Apply temperature correction to CS616 period and find volumetric water content.
				If ( (10 <= Tsoil) AND (Tsoil <= 40) ) Then
					cs616_T(j) = cs616_wcr(j)+(20-Tsoil)*(0.526+cs616_wcr(j)*(-0.052+cs616_wcr(j)*0.00136))
				Else
					cs616_T(j) = cs616_wcr(j)
				EndIf
				soil_water_T(j) = -0.0663+cs616_T*(-0.0063+cs616_T*0.0007)
			Next j
		EndIf


		'Measure rain gauge (Changed to Pulseport 1 112211 by S. Hackley)
		PulseCount (rain,1,1,2,0,0.254,0)


		'Lag the CSAT3 and LI-7500 measurements.
		CallTable dly_data



		If ( scan_count >= OFFSET ) Then
			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (panel_temp,1,dly_data_out(1),1)	'panel_temp

			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Ux,5,dly_data_out(2),5)			'Ux, Uy, Uz, Ts, diag_csat

			'Load in the LI-7500 data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,4,dly_data_out(7),4)		'co2, h2o, press, diag_irga


			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east = -1*Uy
			wind_north = Ux

			'Save the molar density to compute molar concentration.
			co2_mm_m3 = co2
			h2o_mm_m3 = h2o

			'Compute the molar concentration of CO2 and H2O.
			co2_um_m = co2_mm_m3*R*(t_hmp+273.15)/press*1000
			h2o_mm_m = h2o_mm_m3*R*(t_hmp+273.15)/press

			'Convert LI-7500 data from molar density [mmol/m^3] to mass density.
			' 44 [g/mol] - molecular weight of carbon dioxide
			' 0.018 [g/mmol] - molecular weight of water vapor
			If ( NOT (co2 = -99999) ) Then ( co2 = co2*44 )
			h2o = h2o*0.018


			'Define 61502 as NaN.
			If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

			'Break up the four CSAT3 warning flags into four separate bits.
			diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

			'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000

			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(3) = ( disable_flag_on(1) AND NOT (Ts = NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work < &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )


			'Swap the LI-7500 diagnostic bit state.
			diag_irga = diag_irga XOR &h00f0
			diag_irga_work = diag_irga

			'Turn on the intermediate processing disable flag when the LI-7500 has failed to
			' send data to the datalogger via SDM. Set all flags high and rail the AGC to 94.
			If ( (co2 < -99990) OR (co2 = NaN) ) Then (diag_irga_work = &h00ff)

			'Compute the AGC.
			agc = INT ((diag_irga_work AND &h000f)*6.25+0.5)

			'Break up the four LI-7500 warning flags into four separate bits.
			chopper_f = diag_irga_work AND &h0080
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010

			'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			' is high, including the special cases NaN or an SDM error.
			disable_flag_on(2) = diag_irga_work AND &h00f0

			'Turn on only when LI-7500 diagnostic warning flags are set.
			disable_flag_on(4) = ( disable_flag_on(2) AND NOT (diag_irga_work >= &h00ff) )

			'Save only the four most significant bits of the LI-7500 diagnostic word.
			diag_irga = INT (diag_irga_work/&h0010)


			'Filter data in the covariance instruction if the CSAT3 or LI-7500 reports bad data.
			cov_disable_flag = disable_flag_on(1) OR disable_flag_on(2)




			'Start saving the time series data on an even minute boundary.
			If ( (NOT (save_ts_flag_on)) AND (IfTime (0,1,Min)) ) Then ( save_ts_flag_on = TRUE )


			'Save adjusted time series data.
			CallTable ts_data

			'Load the arrays that hold the input data for the covariance instructions.
			cov_array(1,1) = Ts
			Move (cov_array(1,2),3,Ux,3)
			cov_array(2,1) = co2
			Move (cov_array(2,2),3,Ux,3)
			cov_array(3,1) = h2o
			Move (cov_array(3,2),3,Ux,3)

			'Compute the online covariances.
			CallTable comp_cov


			If ( comp_cov.Output(1,1) ) Then
				GetRecord (cov_out(1),comp_cov,1)
				Tsoil_avg = comp_cov.Tsoil_Avg(1,1)

				'Compass wind direction will be between 0 and 360 degrees.
				wnd_dir_compass = (wnd_dir_compass+CSAT3_AZIMUTH) MOD 360

				'CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
				If ( wnd_dir_csat3 ) > 180 Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )

				h2o_hmp_mean = e_hmp_mean/((t_hmp_mean+273.15)*RV)
				rho_d_mean = (press_mean-e_hmp_mean)/((t_hmp_mean+273.15)*RD)
				rho_a_mean = (rho_d_mean+h2o_hmp_mean)/1000


				'Compute online fluxes.
				Fc_irga = cov_co2_Uz
				LE_irga = LV*cov_h2o_Uz
				Hs = rho_a_mean*CP*cov_Ts_Uz

				tau = SQR ((cov_Ux_Uz*cov_Ux_Uz)+(cov_Uy_Uz*cov_Uy_Uz))
				u_star = SQR (tau)
				tau = rho_a_mean*tau


				'Compute the standard deviation from the variance.
				stdev_Ts = SQR (stdev_Ts)
				stdev_Ux = SQR (stdev_Ux)
				stdev_Uy = SQR (stdev_Uy)
				stdev_Uz = SQR (stdev_Uz)
				stdev_co2 = SQR (stdev_co2)
				stdev_h2o = SQR (stdev_h2o)


				sigma_wpl = h2o_hmp_mean/rho_d_mean

				'LI-7500 Webb et al. term for water vapor Eq. (25).
				h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
				h2o_wpl_H = (1+(MU_WPL*sigma_wpl))*h2o_hmp_mean/(t_hmp_mean+273.15)*LV*cov_Ts_Uz
				LE_wpl = LE_irga+h2o_wpl_LE+h2o_wpl_H

				'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(t_hmp_mean+273.15)*(t_hmp_mean+273.15)*LE_wpl)/(press_mean*LV))*((t_hmp_mean+273.15)/(Ts_mean+273.15))

				'LI-7500 Webb et al. term for carbon dioxide Eq. (24).
				co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_h2o_Uz
				co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(t_hmp_mean+273.15)*Hc/(rho_a_mean*CP)
				Fc_wpl = Fc_irga+co2_wpl_LE+co2_wpl_H


				'Compute the change in soil temperature.
				del_Tsoil = Tsoil_avg-prev_Tsoil

				prev_Tsoil = Tsoil_avg
			EndIf

			CallTable flux
		Else
			scan_count = scan_count+1
		EndIf
	NextScan
	
	SlowSequence

	Scan (1,Sec,3,0)
	  AM25T (par(1),2,mV20C,1,6,-1,mux_ref_temp,7,8,Vx1,TRUE,200,250,1,0)
		am25t_dsble_flg_on_mux = FALSE
	  

    AM25T (mux25t_signal(1),23,mV20C,1,6,TypeT,mux_ref_temp,7,8,Vx1,TRUE,200,250,1,0)
		am25t_dsble_flg_on_mux = FALSE
	  
  
	  '22 - up facing
	  '23 - down facing 
	  '21 - TCAV
   NextScan
	
  SlowSequence
   Scan (15,Min,3,0)   
	  PortSet (2,TRUE)
	  
	  
		'Clock the AM16/32A.
		PulsePort (1,10000)
	  
	 	'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(1),1,mV5000,9,TRUE,450,250,1,0)

		'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(2),1,mV5000,9,TRUE,450,250,1,0)

		'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(3),1,mV5000,9,TRUE,450,250,1,0)

		'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(4),1,mV5000,9,TRUE,450,250,1,0)

		'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(5),1,mV5000,9,TRUE,450,250,1,0)

		'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(6),1,mV5000,9,TRUE,450,250,1,0)
 
	  
	  'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(7),1,mV5000,9,TRUE,450,250,1,0)
 
	  'Clock the AM16/32A.
		PulsePort (1,10000)

		'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (NDVI(8),1,mV5000,9,TRUE,450,250,1,0)
 
	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(1),1,mV50C,9,TRUE,200,250,1,0)

		
		'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(2),1,mV50C,9,TRUE,200,250,1,0)

	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(3),1,mV50C,9,TRUE,200,250,1,0)

	  
	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(4),1,mV50C,9,TRUE,200,250,1,0)

	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(5),1,mV50C,9,TRUE,200,250,1,0)


   'Clock the AM16/32A.
		PulsePort (1,10000)  
	  	
	  	
	  'Measure MUX_NUM_SENSORS sensors on a AM16/32A.
		VoltDiff (shf_mV(6),1,mV50C,9,TRUE,200,250,1,0)

   'Clock the AM16/32A.
		PulsePort (1,10000)  
	  
   	'Measure the TCAV soil thermocouples.
		'TCDiff (Tsoil,1,mV20C,9,TypeE,panel_temp_raw,TRUE,200,250,1,0)
    'moved to AM25T on 8/6/12 
   
     'Clock the AM16/32A.
		PulsePort (1,10000)  
		'Measure outgoing PAR
	'	VoltDiff (par,1,mV50C,9,TRUE,200,250,1,0)

   
	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure incoming PAR on PAR Lite
   ' VoltDiff (par_lite,1,mV20C,9,TRUE,200,250,1,0)
    'sensitivity 4.19 uV/umol  serial 080215
   
	
	  'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(1),1,mV1000C,9,TRUE,200,250,10,0)
  


 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(2),1,mV1000C,9,TRUE,200,250,10,0)


 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(3),1,mV1000C,9,TRUE,200,250,10,0)
  

 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(4),1,mV1000C,9,TRUE,200,250,10,0)
   
 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(5),1,mV1000C,9,TRUE,200,250,10,0)

 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(6),1,mV1000C,9,TRUE,200,250,10,0)

 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(7),1,mV1000C,9,TRUE,200,250,10,0)

 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(8),1,mV1000C,9,TRUE,200,250,10,0)
    
    
     'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(9),1,mV1000C,9,TRUE,200,250,10,0)
    
     'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(10),1,mV1000C,9,TRUE,200,250,10,0)
    
     'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(11),1,mV1000C,9,TRUE,200,250,10,0)


 'Clock the AM16/32A.
		PulsePort (1,10000)  
	  'Measure soil CO2
    VoltDiff (soil_co2(12),1,mV1000C,9,TRUE,200,250,10,0)


   'Turn off the AM16/32.
		PortSet (2,FALSE)

		

    For j=1 To 6
        shf(j)=shf_mV(j)*shf_cal(j)
 		Next j
	  
	
		dsble_flg_on_mux = FALSE
	  

 	NextScan
	
	
	
EndProg
