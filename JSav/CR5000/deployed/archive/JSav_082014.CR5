

'Copyright (c) 2002 Campbell Scientific, Inc. All rights reserved.

'1 January 03
'version 1.4 written initially by e swiatek
'modified by Marcy Litvak with 2006 program in January 2014


' This CR5000 program measures turbulence sensors at 10 or 20 Hz.  The time series can be
'saved to a PC Card.  The CR5000 will also compute on-line turbulent fluxes from the
'measured data.  The flux table saves all the cross products that are required to rotate
'the on-line fluxes into natural wind coordinates in post processing as described in:
'
' Kaimal, J. C. and Finnigan, J. J.: 1994, Atmospheric Boundary Layer Flows, Their
'   Structure and Measurement, Oxford University Press, New York, 289 pages.
'
' Tanner, C. B. and Thurtell, G . W.: 1969, Anemoclinometer measurements of reynolds
'   stress and heat transport in the atmospheric surface layer, Final Report, United
'   States Army Electronics Command, Atmospheric Sciences Laboratory, Fort Huachuca,
'   Arizona.





'The sign convention for the fluxes is positive away from the surface and negative
'toward the surface.
'
' The CR5000 will introduce delays into the CSAT3 and CR5000 Panel Temperature
'data.  These delays match the fixed 302.369 mSec delay that Campbell Scientific
'programs into the LI-7500 of the LI-7500 irga (see page 3-23 of the LI-7500 manual
'published by Li-Cor).  The delays are a function of the Scan Interval and are computed
'automatically by the program.
'
'The site attendant must load in several constants and calibration values.  Search
'for the text string "unique" to find the locations where unique constants and
'calibration values are entered.


'*** Unit Definitions ***

'Units	Units
'C		Celsius
'degrees	degrees (angle)
'g		grams
'J		Joules
'kg		kilograms
'kPa		kilopascals
'm		meters
'mg		milligrams
's		seconds
'W		Watts


'*** Operation ***
'
' Set the constant SCAN_INTERVAL to 100 mSec (10 Hz) or 50 mSec (20 Hz).  The
'appropriate value of the constants CSAT_OPT, ANALOG_DELAY, and CSAT_DELAY will be
'computed by the CR5000.  Connect all the sensors to the CR5000 as described in the
'Wiring section.
'
'Download the program to the CR5000.  When servicing the station, set save_flx_flag_on
'low or set Custom Menu option "Save Fluxes?" to No, note that if save_flx_flag_on ("Save
'Fluxes?") is not set back to high (Yes), no flux data will be saved.


'*** User Control in "Custom" Menu of Program Control Flags ***

'The Custom Menu allows the station operator to conveniently change the status of the
'Program Control Flags using the CR5000 keyboard display.

'Save Fluxes?		Change to "Yes" (default) to start processing flux data.
'save_flx_flag_on	Change to "No" when cleaning webs from CSAT3 or performing other
'				 site maintenance.  This "bad" data will not be included in the on-line fluxes.
'
'Save Time Series?	Change to "Yes" (default) to begin collecting time series on PC Card.
'save_ts_flag_on	Change to "No" to stop collecting time series on the PC Card.


'*** Wiring ***

'SDM INPUT
'SDM-C1	CSAT3 SDM Data (green)
'		LI-7500 SDM Data (gray)
'SDM-C2	CSAT3 SDM Clock (white)
'		LI-7500 SDM Clock (blue)
'SDM-C3	CSAT3 SDM Enable (brown)
'		LI-7500 SDM Enable (brown)
'G		CSAT3 SDM reference (black)
'		CSAT3 SDM shield (clear)
'		LI-7500 SDM reference (black)
'		LI-7500 SDM shield (white)


'EXTERNAL POWER SUPPLY
'POS		CSAT3 power (red)
'		LI-7500 power (red with white)
'		CR5000 (red)
'NEG		CSAT3 power reference (black)
'		CSAT3 power shield (clear)
'		LI-7500 power reference (red with black)
'		LI-7500 ground (green)
'		CR5000 (black)
PipeLineMode
'*** Constants ***

Const ANGLE_FROM_NORTH = 225	'Unique value.
'Compass azimuth of the -x axis.  For the figure
' below, ANGLE_FROM_NORTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system aligned to magnetic North
'
'
'                                (N)
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'                                |
'                                |
'              (W) {+x} --------[ ]----X---> {-x} (E)
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S)
'
'The program computes the Compass wind direction, using the constant ANGLE_FROM_NORTH,
'and a CSAT3 wind direction.  Good CSAT3 wind directions are between -90 to 0 and 0 to
'90 degrees (-pi/2 to 0 and 0 to pi/2 radians), i.e. the wind is blowing into the CSAT3
'sensor head.


'Measurement Rate					'10 Hz			20 Hz
Const SCAN_INTERVAL = 100			'100 (mSec)		50 (mSec)

'Output period
Const OUTPUT_INTERVAL = 30			'On-line flux data output interval in minutes.
Const NUM_DAY_CPU = 42			'Number of days of data to store on the CPU.

Const OFFSET = 7						'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const DELAY_CSAT = 2					'Fixed inherent lag of the CSAT3 data (two scans).
Const DELAY_IRGA = INT (300/SCAN_INTERVAL)	'Fixed inherent lag of the LI-7500 data (three scans at 10 Hz or six scans at 20 Hz).

'Determine scan buffer size, CSAT3 Execution Parameters and fixed lags for CSAT3 and LI-7500.
Const SCAN_BUFFER_SIZE = 30*INT (1000/SCAN_INTERVAL)	'Compute a 30 second scan buffer.
Const CSAT_OPT = INT (1000/SCAN_INTERVAL)			'Compute CSAT3 Execution Parameter (10 or 20 Hz).
Const CSAT_REC_BCK = OFFSET-DELAY_CSAT				'Number of records back to align CSAT3 data.
Const IRGA_REC_BCK = OFFSET-DELAY_IRGA				'Number of records back to align LI-7500 data.

'Compute CPU and card storage size for the FLUX DataTables.
Const FLUX_SIZE_CPU = (NUM_DAY_CPU*1440)/OUTPUT_INTERVAL'Size of flux DataTable on CPU [days].


Const CP = 1004.67				'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440				'Estimate of the latent heat of vaporization [J/g].
Const SDM_PER = 30				'Default SDM clock speed, 30 uSec bit period.
Const MU_WPL = 29/18			'Ratio of the molecular weight of dry air to that of water vapor.
Const R = 8.3143e-3				'Universal gas constant [ (kP m^3) / (K mol) ].
Const RD = R/29				'Gas constant for dry air [J/(g K)].
Const RV = R/18			'Gas constant for water vapor [J/(mg K)].


Const A_0 = 6.107800			'Coefficients for the sixth order approximating
Const A_1 = 4.436519e-1			' saturation vapor pressure polynomial (Lowe,
Const A_2 = 1.428946e-2			' Paul R., 1976.:  An approximating polynomial for
Const A_3 = 2.650648e-4			' computation of saturation vapor pressure, J. Appl.
Const A_4 = 3.031240e-6			' Meteor., 16, 100-103).
Const A_5 = 2.034081e-8
Const A_6 = 6.136821e-11


Const YES = -1					'Yes is defined as True or -1.
Const NO = 0					'No is defined as False or 0.


Const shf_cal_1=35.6
Const shf_cal_2=32.2
Const shf_cal_3=33.0
Const shf_cal_4=35.2

'Thermistor constants for the CNR1.
Const Ta = 0.0010295
Const Tb = 0.0002391
Const Tc = 1.568e-7

'Constants for Apogee IR-T  Model SI-1H1, S/N 1162

Const mC2 = 96475.3
Const mC1 = 9339300
Const mC0 = 1721000000
Const bC2 = 2631.02
Const bC1 = 124674
Const bC0 = -13462800

'Const PAR_li190_Sensitivity		=  5.75    'SN Q35360 						
'Const PAR_mult_Li =  1000/(PAR_li190_Sensitivity * 0.604)

'Kipp and Zonen = par_up  70989
'Const PAR_KippZonen= 5.48
'Const PAR_mult_KZ = 1000/PAR_KippZonen

'New Kipp and Zonen = par_up  S/N 140255   cal 8.97 uv/umol
Const PAR_KippZonen_up = 8.97
Const PAR_mult_KZ_up = 1000/PAR_KippZonen_up

'New Kipp and Zonen = par_down  S/N 140262   cal 8.35 uv/umol
Const PAR_KippZonen_down = 8.35
Const PAR_mult_KZ_down = 1000/PAR_KippZonen_down

'was 163.666 prior to 11714, from now on it is correct sensitivity
Const CNR1_Sensitivity =   11.83
Const CNR1_mult=1000/CNR1_Sensitivity
'sn 51024

Const AGC_THRESHOLD = 99

'*** Variables ***
Public GPS_Time

'Online lagged CSAT3 and LI-7500 data.
Public aligned_data(10)
Alias aligned_data(1) = panel_temp
Alias aligned_data(2) = Ux
Alias aligned_data(3) = Uy
Alias aligned_data(4) = Uz
Alias aligned_data(5) = Ts
Alias aligned_data(6) = diag_csat
Alias aligned_data(7) = co2
Alias aligned_data(8) = h2o
Alias aligned_data(9) = press
Alias aligned_data(10) = diag_irga
Units panel_temp = C
Units Ux = m/s
Units Uy = m/s
Units Uz = m/s
Units Ts = C
Units diag_csat = unitless
Units co2 = mmol/m^3
Units h2o = mmol/m^3
Units press = kPa
Units diag_irga = unitless

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol

Public diag_bits(8) As Boolean				'Warning flags.
Alias diag_bits(1) = del_T_f		'Delta temperature warning flag.
Alias diag_bits(2) = sig_lck_f	'Poor signal lock warning flag.
Alias diag_bits(3) = amp_h_f		'Amplitude high warning flag.
Alias diag_bits(4) = amp_l_f		'Amplitude low warning flag.
Alias diag_bits(5) = chopper_f	'Chopper warning flag.
Alias diag_bits(6) = detector_f	'Detector warning flag.
Alias diag_bits(7) = pll_f		'PLL warning flag.
Alias diag_bits(8) = sync_f		'Synchronization warning flag.
			'Automatic gain control.
Units diag_bits = samples
Public agc As Long				'Automatic gain control.
Units agc = unitless


Public batt_5000
Units batt_5000 = Volts

Public panelT_5000			'CR5000 panel temperature.
Units panelT_5000 = C

Public watchdog_5000
Units watchdog_5000 = unitless

Public low12V_5000
Units low12V_5000 = unitless

Public panelV
Units panelV = Volts

Public battbank
Units battbank = Volts

'No delay on meteorological sensors.


Public AirTC(2)
Alias AirTC(1)=AirTC_3p7
Alias AirTC(2)=AirTC_10
Units AirTC=Deg C


Public RH(2)
Alias RH(1)=RH_3p7
Alias RH(2)=RH_10
Units RH=eng Units

Public RTD_temp


Dim e_hmp_mean					'HMP45C vapor pressure.
Dim h2o_hmp_mean
Dim rho_a_mean				'Density of moist air.
Units rho_a_mean = kg/m^3
Units e_hmp_mean = kPa
Units h2o_hmp_mean = g/m^3



Public rain
Units rain= mm

'Apogee IR-T S/N 1166 Variables
Public SBTempC
Dim SBTempK
Public TargmV
Dim m
Dim b
Dim TargTempK
Public TargTempC

Public IRT(6)
Alias IRT(1)=IRT_J1
Alias IRT(2)=IRT_J2
Alias IRT(3)=IRT_J3
Alias IRT(4)=IRT_J4
Alias IRT(5)=IRT_J5
Alias IRT(6)=IRT_O1




Public CM3Up
Public CM3Dn
Public CG3Up
Public CG3Dn
Public CNR1TC
Public CNR1TK
'Public CNR1Tres
'Public LnR
Public NetRs
Public NetRl
Public Albedo
Public UpTot
Public DnTot
Public NetTot
Public CG3UpCo
Public CG3DnCo


Units CM3Up=W/meter
Units CM3Dn=W/meter
Units CG3Up=W/meter
Units CG3Dn=W/meter
Units CNR1TC=Deg C
Units CNR1TK=K
'Units CNR1Tres = ohms
Units NetRs=W/meter
Units NetRl=W/meter
Units Albedo=W/meter
Units UpTot=W/meter
Units DnTot=W/meter
Units NetTot=W/meter
Units CG3UpCo=W/meter
Units CG3DnCo=W/meter

Public par(2)
Alias par(1)=par_faceup
Alias par(2)= par_facedown
Units par = umolm2s

Public shf(4)
Alias shf(1)= shf_j1' was shf_juniper_east  'pulled on 10/10 because wire was cut, replaced on 10/21  cal factor 32.2, was in same pit as juniper_west
'moved 10/21/13  'H063016
Alias shf(2)= shf_j2'was shf_juniper_west 'H063235 cal 33.0 W/m-2/v-1  found broken on 10/8/13,  replacing with 
'SN H063237   cal 35.2  W/m-2/v-1  on 10/10/13Alias shf(1)=shf_open_north ' H063015 cal 31.6 W/m-2/v-1   found chewed on 10/8/13  repaired and deployed 10/10/13
Alias shf(3)= shf_o1

Alias shf(4)=shf_o2  'was shf_open_south   ' cal factor is 35.6 - moved to new open, which pit?
'was in same place as open_north until 10/11/13.   moved 10/11/13
'H063236



'need to figure out which is which
Public TCAV(4)
Alias TCAV(1) = tcav_j1
Alias TCAV(2) = tcav_j2
Alias TCAV(3) = tcav_01
Alias TCAV(4) = tcav_o2


Public Soil_CO2(9)
Alias Soil_CO2(1)=Soil_CO2_J1_5
Alias Soil_CO2(2)=Soil_CO2_J1_10
Alias Soil_CO2(3)=Soil_CO2_J1_30
Alias Soil_CO2(4)=Soil_CO2_J2_5
Alias Soil_CO2(5)=Soil_CO2_J2_10
Alias Soil_CO2(6)=Soil_CO2_J2_30
Alias Soil_CO2(7)=Soil_CO2_J3_5
Alias Soil_CO2(8)=Soil_CO2_J3_10
Alias Soil_CO2(9)=Soil_CO2_J3_30


Public SWC(18)			'CS616 water content reflectometer measurement.
Alias SWC(1) =SWC_J1_5
Alias SWC(2)= SWC_J1_10
Alias SWC(3)= SWC_J1_30
Alias SWC(4)= SWC_J2_5
Alias SWC(5)= SWC_J2_10
Alias SWC(6)= SWC_J2_30
Alias SWC(7)= SWC_J3_5
Alias SWC(8)= SWC_J3_10
Alias SWC(9)= SWC_J3_30
Alias SWC(10)=SWC_O1_5
Alias SWC(11)=SWC_O1_10
Alias SWC(12)=SWC_O1_30
Alias SWC(13)=SWC_O2_5
Alias SWC(14)=SWC_O2_10
Alias SWC(15)=SWC_O2_30
Alias SWC(16)=SWC_O3_5
Alias SWC(17)=SWC_O3_10
Alias SWC(18)=SWC_O3_30





Public soilT(18)
Alias soilT(1)= SoilT_J1_5
Alias soilT(2)= SoilT_J1_10
Alias soilT(3)= SoilT_J1_30
Alias soilT(4)= SoilT_J2_5
Alias soilT(5)= SoilT_J2_10
Alias soilT(6)= SoilT_J2_30
Alias soilT(7)= SoilT_J3_5
Alias soilT(8)= SoilT_J3_10
Alias soilT(9)= SoilT_J3_30
Alias soilT(10)= SoilT_O1_5
Alias soilT(11)= SoilT_O1_10
Alias soilT(12)= SoilT_O1_30
Alias soilT(13)= SoilT_O2_5
Alias soilT(14)= SoilT_O2_10
Alias soilT(15)= SoilT_O2_30
Alias soilT(16)= SoilT_O3_5
Alias soilT(17)= SoilT_O3_10
Alias soilT(18)= SoilT_03_30

Public sap(10)					'Sap flow measurements			
Alias sap(1)= sap_J1a
Alias sap(2)= sap_J1b
Alias sap(3)= sap_J2a
Alias sap(4)= sap_J2b
Alias sap(5)= sap_J3a
Alias sap(6)= sap_J3b
Alias sap(7)= sap_J4a
Alias sap(8)= sap_J4b
Alias sap(9)= sap_J5a
Alias sap(10)= sap_J5b





Units sap = mV





'Flux variables.
Dim Fc_wpl				'Co2 flux, with Webb et al. term.
Dim LE_wpl				'Latent heat flux, with Webb et al. term.
Dim Hs					'Sensible heat flux using sonic temperature.
Dim Hc					'Sensible heat flux computed from Hs and LE_wpl.
Dim tau					'Momentum flux.
Dim u_star				'Friction velocity.
Dim Fc_irga				'Co2 flux, raw.
Dim LE_irga				'Latent heat flux, raw.
Dim co2_wpl_LE				'Co2 flux, Webb et al. term do to latent heat flux.
Dim co2_wpl_H				'Co2 flux, Webb et al. term do to sensible heat flux.
Dim h2o_wpl_LE				'Latent heat flux, Webb et al. term do to latent heat flux.
Dim h2o_wpl_H				'Latent heat flux, Webb et al. term do to sensible heat flux.
Dim cov_out(32)			'Covariances of wind and scalars, wind vector, and mean rho_a, rho_d, t_hmp, co2, and h2o.
Units Fc_wpl = umolm^2s
Units LE_wpl = W/m^2
Units Hs = W/m^2
Units tau = kg/(m s^2)
Units u_star = m/s
Units Fc_irga = mg/(m^2 s)
Units LE_irga = W/m^2
Units co2_wpl_LE = mg/(m^2 s)
Units co2_wpl_H = mg/(m^2 s)
Units h2o_wpl_LE = W/m^2
Units h2o_wpl_H = W/m^2

'Aliases for covariances.
Alias cov_out(1) = stdev_Ts
Alias cov_out(2) = cov_Ts_Ux
Alias cov_out(3) = cov_Ts_Uy
Alias cov_out(4) = cov_Ts_Uz
Alias cov_out(5) = stdev_Ux
Alias cov_out(6) = cov_Ux_Uy
Alias cov_out(7) = cov_Ux_Uz
Alias cov_out(8) = stdev_Uy
Alias cov_out(9) = cov_Uy_Uz
Alias cov_out(10) = stdev_Uz
Alias cov_out(11) = stdev_co2
Alias cov_out(12) = cov_co2_Ux
Alias cov_out(13) = cov_co2_Uy
Alias cov_out(14) = cov_co2_Uz
Alias cov_out(15) = stdev_h2o
Alias cov_out(16) = cov_h2o_Ux
Alias cov_out(17) = cov_h2o_Uy
Alias cov_out(18) = cov_h2o_Uz
Units stdev_Ts = C
Units cov_Ts_Ux = m C/s
Units cov_Ts_Uy = m C/s
Units cov_Ts_Uz = m C/s
Units stdev_Ux = m/s
Units cov_Ux_Uy = (m/s)^2
Units cov_Ux_Uz = (m/s)^2
Units stdev_Uy = m/s
Units cov_Uy_Uz = (m/s)^2
Units stdev_Uz = m/s
Units stdev_co2 = mg/m^3
Units cov_co2_Ux = mg/(m^2 s)
Units cov_co2_Uy = mg/(m^2 s)
Units cov_co2_Uz = mg/(m^2 s)
Units stdev_h2o = g/m^3
Units cov_h2o_Ux = g/(m^2 s)
Units cov_h2o_Uy = g/(m^2 s)
Units cov_h2o_Uz = g/(m^2 s)

'Wind directions and speed.
'Alias cov_out(19) = wnd_spd - in compass coordinate system, same as CSAT3.
'Alias cov_out(20) = rslt_wnd_spd - in compass coordinate system, same as CSAT3.
Alias cov_out(21) = wnd_dir_compass
'Alias cov_out(22) = std_wnd_dir - in compass coordinate system, same as CSAT3.
Alias cov_out(23) = wnd_spd
Alias cov_out(24) = rslt_wnd_spd
Alias cov_out(25) = wnd_dir_csat3
Alias cov_out(26) = std_wnd_dir
Alias cov_out(27) = AirTC_24_mean
Alias cov_out(28) = e_hmp_mean
Alias cov_out(29) = co2_mean
Alias cov_out(30) = h2o_mean
Alias cov_out(31) = press_mean
Alias cov_out(32) = Ts_mean
Units wnd_dir_compass = degrees
Units wnd_spd = m/s
Units rslt_wnd_spd = m/s
Units wnd_dir_csat3 = degrees
Units std_wnd_dir = degrees
Units AirTC_24_mean = C
Units co2_mean = mg/m^3
Units h2o_mean = mg/m^3
Units press_mean = kPa
Units Ts_mean = C



'Diagnostic variables.
Dim disable_flag_on(4) As Boolean		'Intermediate processing disable.
'disable_flag_on(1)		'Set high when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'disable_flag_on(2)		'Set high when LI-7500 diagnostic warning flags are on or LI-7500 failed to send data.
'disable_flag_on(3)		'Set high when CSAT3 diagnostic warning flags are on.
' Used to filter the sum of CSAT3 diagnostic warning flags.
'disable_flag_on(4)		'Set high when LI-7500 diagnostic warning flags are on.
' Used to filter the sum of LI-500 diagnostic warning flags.
Dim cov_disable_flag As Boolean	'TRUE when CSAT3 or LI-7500 reports bad data.
Dim n					'Number of samples in the on-line covariances.
Units n = samples


'Measurement variables without delays.
Dim wind_raw(5)				'CSAT3 data, before adding delay.
Alias wind_raw(1) = Ux_raw
Alias wind_raw(2) = Uy_raw
Alias wind_raw(3) = Uz_raw
Alias wind_raw(4) = Ts_raw
Alias wind_raw(5) = diag_csat_raw
Units wind_raw = m/s
Units Ts_raw = C
Units diag_csat_raw = unitless

'No delay LI-7500 data.
Dim irga_raw(4)
Alias irga_raw(1) = co2_raw
Alias irga_raw(2) = h2o_raw
Alias irga_raw(3) = press_raw
Alias irga_raw(4) = diag_irga_raw
Units co2_raw = mmol/m^3
Units h2o_raw = mmol/m^3
Units press_raw = kPa
Units diag_irga_raw = unitless


Dim panelT_5000_in			'Panel temperature, before adding delay.


'Working variables.
Dim cov_array(3,4)				'Array used in the covariance instruction.
Dim co2_mm_m3				'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol concentration.
Dim h2o_mm_m3				'Water vapor concentration [mmol/m^3], used to compute vapor pressure and mmol/mol concentration.
Dim t_hmp_K				'HMP45C temperature in Kelvin.
Dim sigma_wpl				'Webb et al. sigma = density of water / density of dry air.
Dim i
Dim ii
Dim iii
Dim j					'Counter variable.
Dim scan_count	As Long			'Counts the number scans that have been executed.
Dim wind_east				'Uy wind in compass coordinate system.
Dim wind_north				'Ux wind in compass coordinate system.
Dim save_ts_flag_on	As Boolean	'Used to synchronize the time series output to the even minute.
Dim dly_data_out(10)			'Variable used to temporarily store the lagged record.
Dim diag_csat_work As Long		'Working variable used to break out the CSAT3 diagnostic bits.
Dim diag_irga_work As Long		'Working variable used to break out the LI-7500 diagnostic bits.
Dim dsble_flg_on_mux As Boolean
Dim rho_d_mean				'Density of dry air.
Dim e_sat				'Saturation vapor pressure.


Public counter
Public radio_on As Boolean  'Set high to activate C3 for radio
'*** Final Output Data Tables ***

'This table will hold fourteen days of flux data on the CPU or twenty-eight days on the
'PC Card of flux data.  This data is output every OUTPUT_INTERVAL minutes.
DataTable (flux,TRUE,1440)
  DataInterval (0,OUTPUT_INTERVAL,Min,10)
  CardOut (0,2880)
  Sample (1,GPS_Time,IEEE4)
  Sample (1,Fc_wpl,IEEE4)
  Sample (1,LE_wpl,IEEE4)
  Sample (1,Hc,IEEE4)
  Sample (1,tau,IEEE4)
  Sample (1,u_star,IEEE4)
  Totalize (1,n,IEEE4,cov_disable_flag)
 
  Average (3,Ux,IEEE4,(disable_flag_on(1))
  Average (1,Ts,IEEE4,(disable_flag_on(1))
  Average (2,co2_mean,IEEE4,(disable_flag_on(2))
  Average (1,co2_um_m,IEEE4,(disable_flag_on(2))
  Average (1,h2o_mm_m,IEEE4,(disable_flag_on(2))
  Average (1,rho_a_mean,IEEE4,disable_flag_on(2))
  Average (1,press,IEEE4,disable_flag_on(2))
 
  Sample (1,wnd_dir_compass,IEEE4)
  Sample (1,wnd_dir_csat3,IEEE4)
  Sample (1,wnd_spd,IEEE4)
  Sample (1,rslt_wnd_spd,IEEE4)
  Sample (1,std_wnd_dir,IEEE4)
  
  Sample (1,stdev_Ts,IEEE4)
  Sample (1,stdev_co2,IEEE4)
  Sample (1,stdev_h2o,IEEE4)
  Sample (1,stdev_Ux,IEEE4)
  Sample (1,stdev_Uy,IEEE4)
  Sample (1,stdev_Uz,IEEE4)
  Sample (3,cov_Ts_Ux,IEEE4)
  Sample (2,cov_Ux_Uy,IEEE4)
  Sample (1,cov_Uy_Uz,IEEE4)
  Sample (3,cov_co2_Ux,IEEE4)
  Sample (3,cov_h2o_Ux,IEEE4)
  
  Average (1,panelT_5000_in,IEEE4,FALSE)
  Average (1,batt_5000,IEEE4,FALSE)
  Average (1,battbank,IEEE4,FALSE)
  Average (1,panelV,IEEE4,FALSE)
  Totalize (1,low12V_5000,IEEE4,FALSE)
  Totalize (1,watchdog_5000,IEEE4,FALSE)
 
  Totalize (1,n,IEEE4,NOT (disable_flag_on(1) OR disable_flag_on(3)))
	FieldNames ("csat_warnings")

	Totalize (1,n,IEEE4,NOT (disable_flag_on(2) OR disable_flag_on(4)))
	FieldNames ("irga_warnings")

	Totalize (1,n,IEEE4,NOT (del_T_f) OR NOT (disable_flag_on(3)))
	FieldNames ("del_T_f_Tot")
	Totalize (1,n,IEEE4,NOT (sig_lck_f) OR NOT (disable_flag_on(3)))
	FieldNames ("sig_lck_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_h_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_h_f_Tot")
	Totalize (1,n,IEEE4,NOT (amp_l_f) OR NOT (disable_flag_on(3)))
	FieldNames ("amp_l_f_Tot")
	Totalize (1,n,IEEE4,NOT (chopper_f) OR NOT (disable_flag_on(4)))
	FieldNames ("chopper_f_Tot")
	Totalize (1,n,IEEE4,NOT (detector_f) OR NOT (disable_flag_on(4)))
	FieldNames ("detector_f_Tot")
	Totalize (1,n,IEEE4,NOT (pll_f) OR NOT (disable_flag_on(4)))
	FieldNames ("pll_f_Tot")
	Totalize (1,n,IEEE4,NOT (sync_f) OR NOT (disable_flag_on(4)))
	FieldNames ("sync_f_Tot")
	Average (1,agc,IEEE4,FALSE)
 
 
  Average(1,CM3Up,IEEE4,False)
  FieldNames("Rad_short_Up_Avg")
  Average(1,CM3Dn,IEEE4,False)
  FieldNames("Rad_short_Dn_Avg")
  Average(1,CG3Up,IEEE4,False)
  FieldNames("Rad_long_Up__Avg")
  Average(1,CG3Dn,IEEE4,False)
  FieldNames("Rad_long_Dn__Avg")
  Average(1,CG3UpCo,IEEE4,FALSE)
  Average(1,CG3DnCo,IEEE4,FALSE)
  Average(1,NetTot,IEEE4,False)
  Average(1,NetRs,IEEE4,False)
  Average(1,NetRl,IEEE4,False)
  Average(1,CNR1TC,IEEE4,False)
  Average (2,par(1),IEEE4,FALSE)
  
  Average(2,AirTC(1),IEEE4,False)
  Average(2,RH(1),IEEE4,False)
  Average (1,RTD_temp,IEEE4,False)
  Average (1,TargmV,FP2,False)
  Average (1,SBTempC,FP2,False)
  Average (1,TargTempC,FP2,False)
  
  Totalize (1,rain,IEEE4,FALSE)
  Average (1,e_hmp_mean,IEEE4,FALSE)
  Average (1,e_sat,IEEE4,FALSE)
  Average (1,h2o_hmp_mean,IEEE4,FALSE)
  Average (18,SWC(1),IEEE4,FALSE)
  Average (18,soilT(1),IEEE4,FALSE) 
  Average (9,Soil_CO2(1),IEEE4,FALSE)
  Average (4,shf(1),IEEE4,FALSE)
  Average (4,TCAV(1),IEEE4,FALSE)
  Average (10,sap(1),IEEE4,FALSE)
  Average (6,IRT(1),IEEE4,FALSE)
EndTable


'Set save_ts_flag_on high or set "Save Time Series?" custom menu option to Yes
'to save time series data.
DataTable (ts_data,save_ts_flag_on,-1)
  DataInterval (0,SCAN_INTERVAL,mSec,100)
  CardOut (0,-1)
  Sample (3,Ux,IEEE4)
  Sample (2,co2,IEEE4)
  Sample (1,Ts,IEEE4)
  Sample (1,press,IEEE4)
  Sample (1,diag_csat,IEEE4)
  Sample (1,diag_irga,IEEE4)

EndTable


'*** Working Data Tables ***
'Reorder the data and prepare to lag all the data.
DataTable (dly_data,TRUE,OFFSET)
	Sample (1,panelT_5000_in,IEEE4)
	Sample (1,Ux_raw,IEEE4)
	Sample (1,Uy_raw,IEEE4)
	Sample (1,Uz_raw,IEEE4)
	Sample (1,Ts_raw,IEEE4)
	Sample (1,diag_csat_raw,IEEE4)
	Sample (1,co2_raw,IEEE4)
	Sample (1,h2o_raw,IEEE4)
	Sample (1,press_raw,IEEE4)
	Sample (1,diag_irga_raw,IEEE4)
EndTable


'Compute the covariances of vertical wind, co2, h2o, and sonic temperature, as well as
'the other cross products, required to rotate the data into natural wind coordinates.
'This data is output every OUTPUT_INTERVAL minutes.
'Compute the flux covariances and the other cross products required to rotate the data
'into natural wind coordinates. This data is output every OUTPUT_INTERVAL minutes.
DataTable (comp_cov,TRUE,1)
	DataInterval (0,OUTPUT_INTERVAL,Min,1)

	'Compute covariances from CSAT3 data.
	Covariance (4,cov_array(1,1),IEEE4,disable_flag_on(1),10)
	'Compute covariance of CO2 against CSAT3 wind data.
	Covariance (4,cov_array(2,1),IEEE4,cov_disable_flag,4)
	'Compute covariance of H2O against CSAT3 wind data.
	Covariance (4,cov_array(3,1),IEEE4,cov_disable_flag,4)
	WindVector (1,wind_east,wind_north,IEEE4,disable_flag_on(1),0,1,2)
	WindVector (1,Uy,Ux,IEEE4,disable_flag_on(1),0,1,2)
	Average (1,AirTC(2),IEEE4,FALSE)
	Average (1,e_hmp_mean,IEEE4,FALSE)
	Average (1,co2,IEEE4,disable_flag_on(2))
	Average (1,h2o,IEEE4,disable_flag_on(2))
	Average (1,press,IEEE4,disable_flag_on(2))
	Average (1,Ts,IEEE4,disable_flag_on(1))
EndTable


'*** Program ***

BeginProg

  n = 1

  'Set all CSAT3 variables to NaN.
  Move (Ux_raw,5,NaN,1)

  'Set all LI-7500 variables to NaN.
  Move (co2_raw,4,NaN,1)

  'Set the SDM clock speed.
  SDMSpeed (SDM_PER)

 

  Scan (SCAN_INTERVAL,mSec,10,0)

    'CR5000 panel temperature.
    PanelTemp (panelT_5000_in,250)


    'Get CSAT3 wind and sonic temperature data.
    CSAT3 (Ux_raw,1,3,91,CSAT_OPT)


    'Get LI-7500 data.
    CS7500 (co2_raw,1,7,6)

    

    'CNR1 Net Radiometer measurements CM3Up, CM3Dn, CG3Up, CG3Dn, CNR1TC, CNR1TK,
    '	NetRs, NetRl, Albedo, UpTot, DnTot, NetTot, CG3UpCo, and CG3DnCo:
    '
    VoltDiff(CM3Up,1,mV20,1,True,0,250,CNR1_mult,0)
    VoltDiff(CM3Dn,1,mV20,2,True,0,250,CNR1_mult,0)
    VoltDiff(CG3Up,1,mV20,3,True,0,250,CNR1_mult,0)
    VoltDiff(CG3Dn,1,mV20,4,True,0,250,CNR1_mult,0)
   'CNR1 has thermistor on it.  Mark Wallace at Campbell gave me specs for measurement
		Resistance (CNR1TC,1,mV200,5,Ix1,1,1675,TRUE,TRUE,200,250,1.0,0)
		'LnR = LOG (CNR1Tres)
    CNR1TC = CNR1TC/100
		'CNR1TK = 1/(Ta + Tb*(LnR) + Tc*(LnR)^3)
    PRT(CNR1TC,1,CNR1TC,1,0)


    CNR1TK=CNR1TC+273.18
    NetRs=CM3Up-CM3Dn
    NetRl=CG3Up-CG3Dn
    Albedo=CM3Dn/CM3Up
    UpTot=CM3Up+CG3Up
    DnTot=CM3Dn+CG3Dn
    NetTot=UpTot-DnTot
    CG3UpCo=CG3Up+5.67*10^-8*CNR1TK^4
    CG3DnCo=CG3Dn+5.67*10^-8*CNR1TK^4
    ''CNR-2 Measurement (added 111312)   took out 50213, changed program 111813
    '     VoltDiff (NetRs,1,mV20,3,True,200,250,CNR2_SW_CAL,0)
    '     VoltDiff (NetRl,1,mV20,4,True,0,250,CNR2_LW_CAL,0)
    '     NetTot = NetRs + NetRl
 
    'VoltDiff (par(1),1,mV20,16,TRUE,450,450,PAR_mult_KZ,0)
    'VoltDiff (par(2),1,mV200,17,TRUE,450,450,PAR_mult_Li,0)
    
    VoltDiff (par(1),1,mV50,16,TRUE,450,450,PAR_mult_KZ_up,0)
    VoltDiff (par(2),1,mV50,17,TRUE,450,450,PAR_mult_KZ_down,0)
   

  'HMP45C (6-wire) Temperature & Relative Humidity Sensor measurements AirTC_2 and RH_2: was previously
		'changed this to 1 to make the top of tower the highest number.  010914
    VoltDiff (AirTC(1),1,mV5000,9,TRUE,200,250,0.1,-40)
		VoltDiff (RH(1),1,mV1000,10,TRUE,200,250,0.001,0)
		If RH(1)>1.00 AND RH(1)<1.08 Then RH(1)=1.00


     'HMP60 Temperature & Relative Humidity Sensor measurements AirTC and RH: until 010914
   	VoltDiff (AirTC(2),1,mV5000,7,TRUE,200,250,0.1,-40)
		VoltDiff (RH(2),1,mV1000,8,TRUE,200,250,0.001,0)
		If RH(2)>1.00 AND RH(2)<1.08 Then RH(2)=1.00
		' canopy
		

    TCSe (TCAV(1),4,mV20C,35,TypeE,panelT_5000,True,0,250,1.0,0)

	




    Resistance (RTD_temp,1,mV200,11,Ix2,1,180,True,True,200,250,0.001,0)
    PRT (RTD_temp,1,RTD_temp,1.0,0)

  

    'Find the HMP45C vapor pressure, in kPa, using a sixth order polynomial (Lowe, 1976).
    e_sat = 0.1*(A_0+AirTC(2)*(A_1+AirTC(2)*(A_2+AirTC(2)*(A_3+AirTC(2)*(A_4+AirTC(2)*(A_5+AirTC(2)*A_6))))))
    e_hmp_mean = e_sat*RH(2)

    
 'Measure charge of solar panels and battery bank
     VoltDiff (battbank,1,mV5000,12,1,0,450,.01,0)
     VoltDiff (panelV,1,mV5000,13,1,0,250,.01,0)

    'Measure Apogee IR-T

    'Instruction to measure sensor body temperature (green wire to SE25, white wire to VX1, blue wire to VX ground)
    Therm109 (SBTempC,1,16,Vx3,0,250,1.0,0)

    'Instruction to measure mV output of thermopile detector (red wire to 14H, black wire to 14L, clear wire to 14 ground)
    VoltDiff (TargmV,1,mV20,6,True ,0,250,1.0,0)

    'Calculation of m (slope) and b (intercept) coefficients for target temperature calculation
    m = mC2 * SBTempC^2 + mC1 * SBTempC + mC0
    b = bC2 * SBTempC^2 + bC1 * SBTempC + bC0

    'Calculation of target temperature
    SBTempK = SBTempC + 273.15
    TargTempK = ((SBTempK^4) + m * TargmV + b)^0.25
    TargTempC = TargTempK - 273.15

   

   
  
    
'changed mult factor on 010914   , before that was .254 and Tim did correction in RBD
    'Measure rain gauge
    PulseCount (rain,1,2,2,0,.1,0)

    'Get the battery voltage, and other variables from the Status Table.
    Battery (batt_5000)
    low12V_5000= Status.Low12VCount(1,1)
    watchdog_5000 = Status.WatchdogErrors(1,1)



    'Lag the CSAT3 and LI-7500 measurements.
		CallTable dly_data

   
   	If ( scan_count >= OFFSET ) Then
			'Load in the analog data that has been lagged by OFFSET scans.
			GetRecord (dly_data_out(1),dly_data,OFFSET)
			Move (panelT_5000,1,dly_data_out(1),1)	'panel_temp

			'Load in CSAT3 data that has been lagged by CSAT_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,CSAT_REC_BCK)
			Move (Ux,5,dly_data_out(2),5)			'Ux, Uy, Uz, Ts, diag_csat

			'Load in the LI-7500 data that has been lagged by IRGA_REC_BCK scans.
			GetRecord (dly_data_out(1),dly_data,IRGA_REC_BCK)
			Move (co2,4,dly_data_out(7),4)		'co2, h2o, press, diag_irga


			'Copy and convert CSAT3 for compass wind vector computation.
			wind_east = -1*Uy
			wind_north = Ux

   'Save the molar density to compute molar concentration.
    co2_mm_m3 = co2
    h2o_mm_m3 = h2o

    'Convert LI-7500 data from molar density [mmol/m^3] to mass density.
    ' 44 [g/mol] - molecular weight of carbon dioxide
    ' 0.018 [g/mmol] - molecular weight of water vapor
    If ( NOT (co2 = -99999) ) Then ( co2 = co2*44 )
    h2o = h2o*0.018


     'Compute the molar concentration of co2 and h2o.
      t_hmp_K = AirTC(2)+273.15
      co2_um_m = co2_mm_m3*R*t_hmp_K/press*1000
      h2o_mm_m = h2o_mm_m3*R*t_hmp_K/press




      'Define 61502 in the diagnostic word as NaN.
      If ( diag_csat = NaN ) Then ( diag_csat = 61502 )

      'Break up the four CSAT3 warning flags into four separate bits.
      
      diag_csat_work = diag_csat
			del_T_f = diag_csat_work AND &h8000
			sig_lck_f = diag_csat_work AND &h4000
			amp_h_f = diag_csat_work AND &h2000
			amp_l_f = diag_csat_work AND &h1000

  	'Turn on the intermediate processing disable flag when any CSAT3 warning flag is
			' high, including the special cases NaN (61502), a Lost Trigger (61440), No Data
			' (61503), an SDM error (61441), or wrong CSAT3 embedded code (61442).
			disable_flag_on(1) = diag_csat_work AND &hf000

			'Turn on only when CSAT3 diagnostic warning flags are set.
			disable_flag_on(3) = ( disable_flag_on(1) AND (Ts <> NaN) )

			'Save the four most significant bits of the CSAT3 diagnostics, except for the
			' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM
			' error (61441), or wrong CSAT3 embedded code (61442).
			If ( diag_csat_work <= &hf000 ) Then ( diag_csat = INT (diag_csat_work/&h1000) )


			'Swap the LI-7500 diagnostic bit state.
			diag_irga = diag_irga XOR &h00f0
			diag_irga_work = diag_irga


  
      'Turn on the intermediate processing disable flag when the LI-7500 has failed to send data to the
      'CR5000 via SDM.
      If ( (co2 < -99990) OR (co2 = NaN) ) Then (diag_irga_work = &h00ff)		'Set all flags high and rail the AGC to 94.

      'Compute the AGC.
      agc = INT ((diag_irga AND &h000f) * 6.25 + 0.5)

   	'Break up the four LI-7500 warning flags into four separate bits.
			chopper_f = diag_irga_work AND &h0080
			detector_f = diag_irga_work AND &h0040
			pll_f = diag_irga_work AND &h0020
			sync_f = diag_irga_work AND &h0010

		'Turn on the intermediate processing disable flag when any LI-7500 warning flag
			' is high, including the special cases NaN or an SDM error.
			disable_flag_on(2) = diag_irga_work AND &h00f0

			'Turn on only when LI-7500 diagnostic warning flags are set.
			disable_flag_on(4) = ( disable_flag_on(2) AND (h2o <> &h00ff))

			'Save only the four most significant bits of the LI-7500 diagnostic word.
			diag_irga = INT (diag_irga_work/&h0010)
   
			'Filter data in the covariance instruction if the CSAT3 or LI-7500 reports bad data.
			cov_disable_flag = disable_flag_on(1) OR disable_flag_on(2) OR (agc>AGC_THRESHOLD)


			'Start saving the time series data on an even minute boundary.
			If ( (NOT (save_ts_flag_on)) AND (IfTime (0,1,Min)) ) Then ( save_ts_flag_on = TRUE )

      'Write a file mark to the time series table every twenty-four hours with a five hour offset.
      'The filemark is written only to the PC Card if time series data are being stored.
      If ( IfTime (0,1,Min) AND IfTime (0,1440,Min) ) Then
        ( FileMark (ts_data) )
        ( FileMark (flux) )
      EndIf

      CallTable ts_data

	'Load the arrays that hold the input data for the covariance instructions.
			cov_array(1,1) = Ts
			Move (cov_array(1,2),3,Ux,3)
			cov_array(2,1) = co2
			Move (cov_array(2,2),3,Ux,3)
			cov_array(3,1) = h2o
			Move (cov_array(3,2),3,Ux,3)

      CallTable comp_cov


      If ( comp_cov.Output(1,1) ) Then

        GetRecord (cov_out(1),comp_cov,1)

        'The compass wind direction will be between 0 and 360 degrees.
        wnd_dir_compass = (wnd_dir_compass+ANGLE_FROM_NORTH)
        If ( wnd_dir_compass ) < 0 Then ( wnd_dir_compass = wnd_dir_compass+360 )
        wnd_dir_compass = wnd_dir_compass MOD 360

        'The CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
        If ( wnd_dir_csat3 ) > 180 Then ( wnd_dir_csat3 = wnd_dir_csat3-360 )


     		h2o_hmp_mean = e_hmp_mean/((AirTC(2)+273.15)*RV)
				rho_d_mean = (press_mean-e_hmp_mean)/((AirTC(2)+273.15)*RD)
				rho_a_mean = (rho_d_mean+h2o_hmp_mean)/1000


	'Compute online fluxes.
				Fc_irga = cov_co2_Uz
				LE_irga = LV*cov_h2o_Uz
				Hs = rho_a_mean*CP*cov_Ts_Uz

				tau = SQR ((cov_Ux_Uz*cov_Ux_Uz)+(cov_Uy_Uz*cov_Uy_Uz))
				u_star = SQR (tau)
				tau = rho_a_mean*tau


	'Compute the standard deviation from the variance.
				stdev_Ts = SQR (stdev_Ts)
				stdev_Ux = SQR (stdev_Ux)
				stdev_Uy = SQR (stdev_Uy)
				stdev_Uz = SQR (stdev_Uz)
				stdev_co2 = SQR (stdev_co2)
				stdev_h2o = SQR (stdev_h2o)


        'Convert dry air density to g/m^3.
        rho_d_mean = 1e3*rho_d_mean
        sigma_wpl = h2o_mean/rho_d_mean

        'Webb et al. term for water vapor Eq. (25).
        h2o_wpl_LE = MU_WPL*sigma_wpl*LE_irga
        h2o_wpl_H  = (1+(MU_WPL*sigma_wpl))*h2o_mean/(AirTC_24_mean +273.15)*LV*cov_Ts_Uz

        'Webb et al. term for carbon dioxide Eq. (24).
        co2_wpl_LE = MU_WPL*co2_mean/rho_d_mean*cov_h2o_Uz
        co2_wpl_H  = (1+(MU_WPL*sigma_wpl))*co2_mean/(AirTC_24_mean+273.15)*cov_Ts_Uz

        LE_wpl = LE_irga+h2o_wpl_LE+h2o_wpl_H
        Fc_wpl = (Fc_irga+co2_wpl_LE+co2_wpl_H)*(1000/44)
        		'Compute a sensible heat flux from Hs and LE_wpl.
				Hc = (Hs-(rho_a_mean*CP*0.51*RD*(AirTC_24_mean +273.15)*(AirTC_24_mean+273.15)*LE_wpl)/(press_mean*LV))*((AirTC_24_mean+273.15)/(Ts_mean+273.15))


      EndIf

      CallTable flux


      dsble_flg_on_mux = TRUE
	  	Else
			scan_count = scan_count+1
	  	EndIf
	 NextScan


  SlowSequence

	Scan (5,Sec,3,0)
		'Turn on the AM16/32.

		
		dsble_flg_on_mux = FALSE
	  

    AM25T (soilT(1),18,mV20C,1,20,TypeT,panelT_5000_in,1,2,Vx2,TRUE,200,250,1,0) 
    'am25t_dsble_flg_on_mux = FALSE  



		PortSet (3,TRUE)
     i=1 
     SubScan (0,mSec,10)
      PulsePort (4,10000)
      VoltDiff (sap(i),1,mV20,14,TRUE,450,250,1,0)
      i=i+1
    NextSubScan 
 
    ii=1
    SubScan (0,mSec,9)
      PulsePort (4,10000)
      VoltDiff (Soil_CO2(ii),1,mV5000,14,TRUE,450,250,10,0) 
      ii=ii+1
    NextSubScan   

     
      PulsePort (4,10000)
      VoltDiff (shf(1),1,mV20,14,TRUE,200,250,shf_cal_1,0) 
   
      PulsePort (4,10000)
      VoltDiff (shf(2),1,mV20,14,TRUE,200,250,shf_cal_2,0) 
      
      PulsePort (4,10000)
      VoltDiff (shf(3),1,mV20,14,TRUE,200,250,shf_cal_3,0) 
      
      PulsePort (4,10000)
      VoltDiff (shf(4),1,mV20,14,TRUE,200,250,shf_cal_4,0) 




    i=1
      SubScan (0,mSec,6)
      PulsePort (4,10000)
      'VoltDiff (IRT(i),1,AutoRange,14,TRUE,200,250,1,0)
      TCDiff (IRT(i),1,mV20C,14,TypeT,panelT_5000_in,True,450,250,1.0,0) 
      i=i+1
    NextSubScan  




		'Turn off the AM16/32.
		PortSet (3,FALSE)

  NextScan
  
  SlowSequence
  Scan (15,Min,3,0)
    PortSet (6,TRUE)
     iii=1 
     SubScan (0,mSec,18)
      PulsePort (7,10000)
      CS616 (SWC(iii),1,29,8,1,1,0)
      CS616 (SWC(iii+1),1,30,8,1,1,0)
      iii=iii+2
    NextSubScan  
 
   

    PortSet (6,FALSE) 'Turn off soil moisture AM16/32.


		dsble_flg_on_mux = FALSE


  NextScan
  '''''''''''''''''''''''''''''''''''''''''''
EndProg
